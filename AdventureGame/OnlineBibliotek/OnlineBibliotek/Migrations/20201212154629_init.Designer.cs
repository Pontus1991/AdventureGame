// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineBibliotek.Data;

namespace OnlineBibliotek.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20201212154629_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OnlineBibliotek.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author_FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Author_LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("OnlineBibliotek.Models.Author_Book", b =>
                {
                    b.Property<int>("AuthurId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("AuthurId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("Author_Books");
                });

            modelBuilder.Entity("OnlineBibliotek.Models.Book", b =>
                {
                    b.Property<int>("Bookid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LibraryId")
                        .HasColumnType("int");

                    b.Property<int>("RatingId")
                        .HasColumnType("int");

                    b.Property<int>("ReleaseDateId")
                        .HasColumnType("int");

                    b.Property<int>("boktitel")
                        .HasColumnType("int");

                    b.Property<int>("isbn")
                        .HasColumnType("int");

                    b.HasKey("Bookid");

                    b.HasIndex("LibraryId");

                    b.HasIndex("RatingId");

                    b.HasIndex("ReleaseDateId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("OnlineBibliotek.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("First_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LibraryCardId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("LibraryCardId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("OnlineBibliotek.Models.Library", b =>
                {
                    b.Property<int>("LibraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Library_")
                        .HasColumnType("int");

                    b.HasKey("LibraryId");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("OnlineBibliotek.Models.LibraryCard", b =>
                {
                    b.Property<int>("LibraryCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Library_Card")
                        .HasColumnType("int");

                    b.HasKey("LibraryCardId");

                    b.ToTable("LibraryCard");
                });

            modelBuilder.Entity("OnlineBibliotek.Models.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Book_Rating")
                        .HasColumnType("int");

                    b.HasKey("RatingId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("OnlineBibliotek.Models.ReleaseDate", b =>
                {
                    b.Property<int>("ReleaseDateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Release_Date")
                        .HasColumnType("int");

                    b.HasKey("ReleaseDateId");

                    b.ToTable("ReleaseDates");
                });

            modelBuilder.Entity("OnlineBibliotek.Models.Rental", b =>
                {
                    b.Property<int>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("OnLoan")
                        .HasColumnType("bit");

                    b.Property<int?>("Rental_Date")
                        .HasColumnType("int");

                    b.Property<int?>("Returning_Date")
                        .HasColumnType("int");

                    b.HasKey("RentalId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("OnlineBibliotek.Models.Rental_Book", b =>
                {
                    b.Property<int>("RentalId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("RentalId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("Rental_Books");
                });

            modelBuilder.Entity("OnlineBibliotek.Models.Author_Book", b =>
                {
                    b.HasOne("OnlineBibliotek.Models.Author", "Author")
                        .WithMany("Author_Book")
                        .HasForeignKey("AuthurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBibliotek.Models.Book", "Book")
                        .WithMany("Author_Book")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineBibliotek.Models.Book", b =>
                {
                    b.HasOne("OnlineBibliotek.Models.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBibliotek.Models.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBibliotek.Models.ReleaseDate", "ReleaseDate")
                        .WithMany()
                        .HasForeignKey("ReleaseDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineBibliotek.Models.Customer", b =>
                {
                    b.HasOne("OnlineBibliotek.Models.LibraryCard", "LibraryCard")
                        .WithMany()
                        .HasForeignKey("LibraryCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineBibliotek.Models.Rental", b =>
                {
                    b.HasOne("OnlineBibliotek.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineBibliotek.Models.Rental_Book", b =>
                {
                    b.HasOne("OnlineBibliotek.Models.Rental", "Rental")
                        .WithMany("Rental_Book")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineBibliotek.Models.Book", "Book")
                        .WithMany("Rental_Book")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
